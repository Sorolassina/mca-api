from datetime import datetime
from io import BytesIO
from typing import List, Optional
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from PIL import Image as PILImage
import os
import base64

from app.models.models import Emargement, Evenement
from app.config import settings, STATIC_DIR

class SignaturePDFGenerator:
    def __init__(self):
        # Définir la police par défaut
        self.font_name = 'Helvetica'  # Police par défaut de ReportLab
        
        # Essayer de charger Arial si disponible
        font_path = os.path.join(STATIC_DIR, "fonts", "Arial.ttf")
        if os.path.exists(font_path):
            try:
                pdfmetrics.registerFont(TTFont('Arial', font_path))
                self.font_name = 'Arial'
                print("✅ Police Arial chargée avec succès")
            except Exception as e:
                print(f"⚠️ Impossible de charger la police Arial: {str(e)}")
                print("ℹ️ Utilisation de la police par défaut Helvetica")
        
        # Chemin vers le logo (directement dans le dossier static)
        self.logo_path = os.path.join(STATIC_DIR, "logo.png")
        
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Configure les styles personnalisés pour le PDF"""
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Heading1'],
            fontName=self.font_name,
            fontSize=16,
            spaceAfter=30,
            alignment=1  # Centré
        ))
        self.styles.add(ParagraphStyle(
            name='CustomSubtitle',
            parent=self.styles['Heading2'],
            fontName=self.font_name,
            fontSize=14,
            spaceAfter=20,
            alignment=1
        ))
        self.styles.add(ParagraphStyle(
            name='CustomText',
            parent=self.styles['Normal'],
            fontName=self.font_name,
            fontSize=10,
            spaceAfter=12
        ))

    def _base64_to_image(self, base64_string: str, max_width: float = 3*cm, max_height: float = 2*cm) -> Optional[BytesIO]:
        """Convertit une chaîne base64 en image redimensionnée"""
        if not base64_string:
            return None
            
        try:
            # Supprimer le préfixe de l'URL de données si présent
            if ',' in base64_string:
                base64_string = base64_string.split(',')[1]
            
            # Décoder l'image base64
            image_data = base64.b64decode(base64_string)
            img = PILImage.open(BytesIO(image_data))
            
            # Redimensionner l'image
            img.thumbnail((max_width, max_height), PILImage.Resampling.LANCZOS)
            
            # Convertir en PNG
            output = BytesIO()
            img.save(output, format='PNG')
            output.seek(0)
            return output
        except Exception as e:
            print(f"⚠️ Erreur lors du traitement de l'image base64: {str(e)}")
            return None

    def _create_header(self, evenement: Evenement) -> List:
        """Crée l'en-tête du document avec les informations de l'événement"""
        elements = []
        
        # Ajouter le logo si disponible
        if os.path.exists(self.logo_path):
            try:
                # Redimensionner le logo pour qu'il ne soit pas trop grand
                img = PILImage.open(self.logo_path)
                # Calculer les dimensions pour une hauteur de 2cm
                target_height = 2 * cm
                ratio = target_height / img.height
                target_width = img.width * ratio
                
                # Créer l'image pour le PDF
                logo = Image(self.logo_path, width=target_width, height=target_height)
                elements.append(logo)
                elements.append(Spacer(1, 1*cm))  # Espace après le logo
            except Exception as e:
                print(f"⚠️ Impossible de charger le logo: {str(e)}")
        
        # Titre
        elements.append(Paragraph(f"Liste des participants - {evenement.titre}", self.styles['CustomTitle']))
        
        # Informations de l'événement
        elements.append(Paragraph(f"Date: {evenement.date_debut.strftime('%d/%m/%Y')}", self.styles['CustomSubtitle']))
        if evenement.date_fin:
            elements.append(Paragraph(f"au {evenement.date_fin.strftime('%d/%m/%Y')}", self.styles['CustomSubtitle']))
        
        if evenement.lieu:
            elements.append(Paragraph(f"Lieu: {evenement.lieu}", self.styles['CustomText']))
        
        if evenement.description:
            elements.append(Paragraph(f"Description: {evenement.description}", self.styles['CustomText']))
        
        elements.append(Spacer(1, 20))
        
        return elements

    def _create_signature_table(self, emargements: List[Emargement]) -> Table:
        """Crée le tableau des signatures"""
        # En-têtes du tableau
        headers = ['Nom', 'Prénom', 'Email', 'Type de signature', 'Date de signature', 'Signature', 'Photo (si disponible)']
        data = [headers]
        
        # Données des participants
        for emargement in emargements:
            row = [
                emargement.nom if hasattr(emargement, 'nom') else "N/A",
                emargement.prenom if hasattr(emargement, 'prenom') else "N/A",
                emargement.email,
                "Présentiel" if emargement.mode_signature == "presentiel" else "À distance",
                emargement.date_signature.strftime('%d/%m/%Y %H:%M') if emargement.date_signature else "Non signé",
            ]
            
            # Gestion de la signature (en base64)
            signature_img = None
            if emargement.signature_image:
                signature_img = self._base64_to_image(emargement.signature_image)
            
            # Gestion de la photo (en base64, uniquement pour signature à distance)
            photo_img = None
            if emargement.mode_signature != "presentiel" and emargement.photo_profil:
                photo_img = self._base64_to_image(emargement.photo_profil)
            
            # Ajout des images au tableau
            row.append(Image(signature_img) if signature_img else "Non disponible")
            row.append(Image(photo_img) if photo_img else "Non disponible")
            
            data.append(row)
        
        # Création du tableau avec des largeurs de colonnes ajustées
        # Format paysage A4 = 29.7cm de large, on répartit l'espace en tenant compte des marges
        # Marges gauche et droite = 1.5cm chacune, donc espace disponible = 26.7cm
        table = Table(data, colWidths=[
            3*cm,      # Nom
            3*cm,      # Prénom
            5*cm,      # Email
            3.5*cm,    # Type de signature
            3.5*cm,    # Date de signature
            3.5*cm,    # Signature
            3.5*cm     # Photo
        ])
        
        # Style du tableau avec ajustements pour la lisibilité
        table.setStyle(TableStyle([
            # Style des en-têtes
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, -1), self.font_name),
            ('FONTSIZE', (0, 0), (-1, 0), 10),  # Taille réduite pour les en-têtes
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('TOPPADDING', (0, 0), (-1, 0), 12),
            ('WORDWRAP', (0, 0), (-1, 0), True),  # Retour à la ligne pour les en-têtes
            
            # Style du contenu
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
            ('FONTSIZE', (0, 1), (-1, -1), 9),  # Taille réduite pour le contenu
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            
            # Ajustements spécifiques
            ('FONTSIZE', (2, 1), (2, -1), 8),  # Email en plus petit
            ('WORDWRAP', (2, 1), (2, -1), True),  # Retour à la ligne pour l'email
            ('LEFTPADDING', (0, 0), (-1, -1), 6),  # Padding gauche
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),  # Padding droit
        ]))
        
        return table

    def generate_signature_pdf(self, evenement: Evenement, emargements: List[Emargement]) -> BytesIO:
        """Génère le PDF final avec toutes les signatures"""
        buffer = BytesIO()
        doc = SimpleDocTemplate(
            buffer,
            pagesize=landscape(A4),
            rightMargin=1.5*cm,
            leftMargin=1.5*cm,
            topMargin=1.5*cm,
            bottomMargin=1.5*cm
        )
        
        # Création des éléments du document
        elements = []
        
        # Ajout de l'en-tête
        elements.extend(self._create_header(evenement))
        
        # Ajout du tableau des signatures
        elements.append(self._create_signature_table(emargements))
        
        # Génération du PDF
        doc.build(elements)
        buffer.seek(0)
        return buffer 