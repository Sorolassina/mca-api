from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, text
import traceback

async def diagnose_sequence(db: AsyncSession, table_name: str, id_column: str = "id") -> dict:
    """
    Diagnostique l'√©tat d'une s√©quence PostgreSQL.
    
    Args:
        db: Session de base de donn√©es
        table_name: Nom de la table
        id_column: Nom de la colonne ID (par d√©faut: "id")
    
    Returns:
        dict: Informations sur l'√©tat de la s√©quence
    """
    print(f"\n=== üîç DIAGNOSTIC DE LA S√âQUENCE {table_name}_{id_column}_seq ===")
    try:
        # V√©rifier le dernier ID utilis√©
        result = await db.execute(
            select(func.max(text(id_column))).select_from(text(table_name))
        )
        max_id = result.scalar_one() or 0
        print(f"üìä Dernier ID utilis√© dans la table: {max_id}")
        
        # V√©rifier la valeur actuelle de la s√©quence
        result = await db.execute(
            text(f"SELECT last_value, is_called FROM {table_name}_{id_column}_seq")
        )
        seq_info = result.fetchone()
        print(f"üìä √âtat de la s√©quence:")
        print(f"  - Derni√®re valeur: {seq_info[0]}")
        print(f"  - S√©quence appel√©e: {seq_info[1]}")
        
        # V√©rifier s'il y a des trous dans la s√©quence en utilisant une sous-requ√™te
        result = await db.execute(
            text(f"""
                WITH ordered_ids AS (
                    SELECT {id_column},
                           LAG({id_column}) OVER (ORDER BY {id_column}) as prev_id
                    FROM {table_name}
                    WHERE {id_column} > 1
                )
                SELECT {id_column}, prev_id
                FROM ordered_ids
                WHERE {id_column} - prev_id > 1
            """)
        )
        gaps = result.fetchall()
        if gaps:
            print("\n‚ö†Ô∏è Trous d√©tect√©s dans la s√©quence:")
            for gap in gaps:
                print(f"  - Trou entre {gap[1]} et {gap[0]}")
        else:
            print("\n‚úÖ Aucun trou d√©tect√© dans la s√©quence")
        
        # Pr√©parer le r√©sultat
        diagnosis = {
            "max_id": max_id,
            "sequence_last_value": seq_info[0],
            "sequence_is_called": seq_info[1],
            "gaps": [(gap[1], gap[0]) for gap in gaps] if gaps else [],
            "is_healthy": max_id == seq_info[0] and not gaps
        }
        
        print("\n=== FIN DIAGNOSTIC ===\n")
        return diagnosis
        
    except Exception as e:
        print(f"‚ùå Erreur lors du diagnostic: {str(e)}")
        print(f"üìã Traceback:\n{traceback.format_exc()}")
        raise

async def reset_sequence(db: AsyncSession, table_name: str, id_column: str = "id") -> None:
    """
    R√©initialise une s√©quence PostgreSQL √† la valeur maximale + 1.
    
    Args:
        db: Session de base de donn√©es
        table_name: Nom de la table
        id_column: Nom de la colonne ID (par d√©faut: "id")
    """
    print(f"\n=== üîÑ R√âINITIALISATION DE LA S√âQUENCE {table_name}_{id_column}_seq ===")
    try:
        # R√©cup√©rer le plus grand ID existant
        result = await db.execute(
            select(func.max(text(id_column))).select_from(text(table_name))
        )
        max_id = result.scalar_one() or 0
        print(f"üìä ID maximum actuel: {max_id}")
        
        # R√©initialiser la s√©quence
        await db.execute(
            text(f"ALTER SEQUENCE {table_name}_{id_column}_seq RESTART WITH {max_id + 1}")
        )
        print(f"‚úÖ S√©quence r√©initialis√©e √† {max_id + 1}")
        
        # Commit des changements
        await db.commit()
        print("=== FIN R√âINITIALISATION DE LA S√âQUENCE ===\n")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©initialisation: {str(e)}")
        print(f"üìã Traceback:\n{traceback.format_exc()}")
        raise 