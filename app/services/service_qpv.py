import requests
import folium
from datetime import date
from geopy.distance import geodesic
from shapely.geometry import Point, Polygon
import os
from app import config
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from PIL import Image
from folium.features import DivIcon
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from fastapi import Request
from app.config import get_base_url
from app.utils.file_encoded import encode_file_to_base64


    
async def verif_qpv(address_coords, request: Request):
    base_url = get_base_url(request)  # R√©cup√©rer l'URL dynamique
    
    address = address_coords.get("address")
    lat = address_coords.get("latitude")
    lon = address_coords.get("longitude")
    
    # ‚úÖ D√©finir `m` au d√©but pour √©viter l'erreur
    point_coords = (lat, lon)
    m = folium.Map(location=point_coords, zoom_start=14)

    # URL de l'API Open Data Soft pour r√©cup√©rer les QPV
    urlqpv = f"https://public.opendatasoft.com/api/explore/v2.1/catalog/datasets/quartiers-prioritaires-de-la-politique-de-la-ville-qpv/records?where=within_distance(geo_shape, geom'POINT({lon} {lat})', 0.3km)"

    try:
        response = requests.get(urlqpv)
        response.raise_for_status()
        data = response.json()
    except requests.exceptions.RequestException as e:
        return {"error": f"Erreur API : {str(e)}"}
    
    # V√©rifier que des r√©sultats existent
    records = data.get("results", [])

    if records and "geo_shape" in records[0] and "geometry" in records[0]["geo_shape"]:
        # Extraction des donn√©es du QPV
        coord_qpv = records[0]["geo_shape"]["geometry"]["coordinates"][0]  # Coordonn√©es du polygone
        qpv_name = records[0]["nom_qp"]  # Nom du QPV
    else:
        coord_qpv = None
        qpv_name = None

    # V√©rifier si un QPV a √©t√© trouv√©
    if coord_qpv and isinstance(coord_qpv, list) and len(coord_qpv) > 2:
        
        point_coords = (lat, lon)
        address_point = Point(point_coords[::-1])  # Shapely utilise (lon, lat)
        polygon = Polygon(coord_qpv)
        
        

        # G√©n√©rer la carte avec Folium
        folium.PolyLine([(y, x) for x, y in coord_qpv], color="blue", fill=True,fill_color="lightblue",
                        weight=2.5, fill_opacity=0.6).add_to(m)
        
        # Ajouter le point de l'adresse √† notre carte
        folium.Marker(
            location=(lat, lon),
            icon=folium.Icon(color="red", icon="info-sign")
        ).add_to(m)

        
        # D√©terminer l'√©tat du QPV
        if polygon.contains(address_point):
            etat_qpv = "QPV"
            distance_m=0
        else:
            # Calcul de la distance
            nearest_point = polygon.exterior.interpolate(polygon.exterior.project(address_point))
            nearest_coords = (nearest_point.y, nearest_point.x)
            distance_km = geodesic(point_coords, nearest_coords).kilometers
            distance_m = round(distance_km * 1000) # On calcul en m√®tres
            
            if distance_m <= 300:
                etat_qpv = "QPV limit"
            else:
                etat_qpv = "Adresse √† plus de 300 m du qpv"

        # üî• Ajouter une couche de texte (affichage permanent)
        info_text = f"""
            <div style="
                background-color: rgba(255, 255, 255, 0.8);
                padding: 10px;
                border-radius: 5px;
                font-size: 12px;
                font-weight: bold;
                text-align: left;
                width: 400px;">
                üìÖ Aujourd'hui : {date.today().strftime("%d/%m/%Y")}<br>
                üìç <b>{address}</b><br>
                ‚úÖ {etat_qpv} : {qpv_name}<br>
                üìè Distance : {distance_m} m√®tres <br>
                üîó <a href="https://public.opendatasoft.com/api/explore/v2.1/console" target="_blank" style="color:blue; text-decoration:none;">
                    Source OpenDataSoft
                    </a>
            </div>
        """
        # Ajouter le texte comme un "marqueur invisible" sur la carte
        folium.Marker(
            location=(lat, lon),  # Position sur la carte
            icon=DivIcon(
                icon_size=(350, 50),  # Taille de l'affichage
                icon_anchor=(0, 0),  # Ancrage en haut √† gauche
                html=info_text,  # Contenu HTML
            ),
        ).add_to(m)
           
        # D√©finir les chemins des fichiers
        map_file = os.path.join(config.STATIC_MAPS_DIR, f"map_{lat}_{lon}.html")
        image_file = os.path.join(config.STATIC_IMAGES_DIR, f"map_{lat}_{lon}.png")

        # Sauvegarde HTML et image
        m.save(map_file)
        # Sauvegarde en image avec `selenium headless`
        save_map_as_image(map_file, image_file)

        maps_url=f"/static/maps/map_{lat}_{lon}.html"
        img_url=f"/static/images/map_{lat}_{lon}.png"

        # V√©rifie si l‚Äôimage existe avant d‚Äôessayer de l‚Äôencoder
        if os.path.exists(image_file):
            encoded_image = encode_file_to_base64(image_file)
        else:
            encoded_image = None  # Si l‚Äôimage n‚Äôexiste pas

        return {
            "address": address,
            "nom_qp": f'{etat_qpv}:{qpv_name}',
            "distance_m": distance_m,
            "carte": f"{base_url.strip()}{maps_url.strip()}",
            "image_url": f"{base_url.strip()}{img_url.strip()}",
            "image_encoded": f"{encoded_image}"
        }
    
    else:
        
        # üî• Ajouter une couche de texte (affichage permanent)
        info_text = f"""
            <div style="
                background-color: rgba(255, 255, 255, 0.8);
                padding: 10px;
                border-radius: 5px;
                font-size: 12px;
                font-weight: bold;
                text-align: left;
                width: 400px;">
                üìÖ Aujourd'hui : {date.today().strftime("%d/%m/%Y")}<br>
                üìç <b>{address}</b><br>
                üö´ Quartier Prioritaire : Aucun QPV trouv√© <br>
                üîó <a href="https://public.opendatasoft.com/api/explore/v2.1/console" target="_blank" style="color:blue; text-decoration:none;">
                    Source OpenDataSoft
                    </a>
            </div>
        """
         # Ajouter le point de l'adresse √† notre carte
        folium.Marker(
            location=(lat, lon),  # Position sur la carte
            icon=folium.Icon(color="red", icon="info-sign")
        ).add_to(m)

        # Ajouter le texte comme un "marqueur invisible" sur la carte
        folium.Marker(
            location=(lat, lon),  # Position sur la carte
            icon=DivIcon(
                icon_size=(350, 50),  # Taille de l'affichage
                icon_anchor=(0, 0),  # Ancrage en haut √† gauche
                html=info_text,  # Contenu HTML
            ),
        ).add_to(m)

        # D√©finir les chemins des fichiers
        map_file = os.path.join(config.STATIC_MAPS_DIR, f"map_{lat}_{lon}.html")
        image_file = os.path.join(config.STATIC_IMAGES_DIR, f"map_{lat}_{lon}.png")
        
        # Sauvegarde HTML et image
        m.save(map_file)
        save_map_as_image(map_file, image_file)

        maps_url=f"/static/maps/map_{lat}_{lon}.html"
        img_url=f"/static/images/map_{lat}_{lon}.png"


        # V√©rifie si l‚Äôimage existe avant d‚Äôessayer de l‚Äôencoder
        if os.path.exists(image_file):
            encoded_image = encode_file_to_base64(image_file)
        else:
            encoded_image = None  # Si l‚Äôimage n‚Äôexiste pas
            
        return {
            "address": address,
            "nom_qp": "Aucun QPV",
            "distance_m": "N/A",
            "carte": f"{base_url.strip()}{maps_url.strip()}",
            "image_url": f"{base_url.strip()}{img_url.strip()}",
            "image_encoded": f"{encoded_image}"
        }

def save_map_as_image(map_path, image_path):
    """Capture une image d'une page HTML avec Selenium headless."""
    
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")  # Ex√©cution sans interface graphique
    options.add_argument("--no-sandbox")  # √âvite les erreurs de sandboxing
    options.add_argument("--disable-dev-shm-usage")  # √âvite les probl√®mes de m√©moire dans Docker
    options.add_argument("--window-size=800x600")  # D√©finit une taille fixe pour la capture
    options.add_argument("--disable-gpu")  # D√©sactive l'acc√©l√©ration GPU
    options.add_argument("--disable-software-rasterizer")  # √âvite certains crashs graphiques

    # Installer automatiquement le bon ChromeDriver
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)

    try:
        
        driver.get("file://" + os.path.abspath(map_path))  # Charger le fichier HTML

        # Attendre que le corps de la page soit charg√© avant la capture
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "body")))

        time.sleep(2)  # Attendre le rendu de la carte

        # Capture d'√©cran et enregistrement
        driver.save_screenshot(image_path)

        # Convertir et optimiser l‚Äôimage avec Pillow
        img = Image.open(image_path)
        img = img.convert("RGB")
        img.save(image_path, "PNG", quality=95)

    except Exception as e:
        print(f"‚ùå Erreur lors de la capture : {e}")
    
    finally:
        driver.quit()  # Fermer le navigateur