# app/services/forms/service_preinscription.py
from fastapi import HTTPException
from app.schemas.forms.schema_preinscription import PreinscriptionForm
from datetime import datetime, date
import json
import os
from app.config import FICHIERS_DIR
from typing import Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from app.models.models import Programme, Preinscription, SituationProfessionnelle, NiveauEtude
from app.utils.transaction_utils import transaction_manager


def serialize_dates(obj: Any) -> Any:
    """Convertit les objets date en cha√Ænes de caract√®res pour la s√©rialisation JSON"""
    if isinstance(obj, (date, datetime)):
        return obj.isoformat()
    return obj

async def get_programme_info(programme_id: int, db: AsyncSession) -> Dict[str, Any]:
    """
    R√©cup√®re les informations d'un programme √† partir de son ID.
    """
    print(f"üîç [SERVICE] R√©cup√©ration des informations du programme: {programme_id}")
    try:
        # Convertir programme_id en entier
        try:
            programme_id_int = int(programme_id)
        except ValueError:
            print(f"üí• [SERVICE] ID de programme invalide: {programme_id}")
            raise HTTPException(
                status_code=400,
                detail="L'ID du programme doit √™tre un nombre entier"
            )

        async with transaction_manager(db) as session:
            # Requ√™te pour r√©cup√©rer le programme
            stmt = select(Programme).where(Programme.id == programme_id_int)
            result = await session.execute(stmt)
            programme = result.scalar_one_or_none()
            
            if not programme:
                print(f"‚ö†Ô∏è [SERVICE] Programme non trouv√© avec l'ID: {programme_id_int}")
                raise HTTPException(
                    status_code=404,
                    detail="Programme non trouv√©"
                )
            
            # Retourner les informations du programme avec gestion s√©curis√©e des dates
            try:
                programme_info = {
                    "id": programme.id,
                    "nom": programme.nom,
                    "description": programme.description,
                    "date_debut": programme.date_debut.isoformat() if programme.date_debut else None,
                    "date_fin": programme.date_fin.isoformat() if programme.date_fin else None,
                    "lieu": programme.lieu,
                    "places_disponibles": programme.places_disponibles,
                    "places_totales": programme.places_totales,
                    "statut": programme.statut.value if programme.statut else None,
                    "prix": programme.prix
                }
                print(f"üìä [SERVICE] Informations du programme format√©es: {programme_info}")
                return programme_info
            except Exception as format_error:
                print(f"üí• [SERVICE] Erreur lors du formatage des donn√©es du programme: {str(format_error)}")
                raise
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"üí• [SERVICE] Erreur lors de la r√©cup√©ration du programme: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de la r√©cup√©ration des informations du programme: {str(e)}"
        )

async def check_duplicate_preinscription(
    email: str,
    programme_id: int,
    db: AsyncSession
) -> bool:
    """
    V√©rifie si une pr√©inscription existe d√©j√† pour cet email et ce programme.
    Retourne True si un doublon est trouv√©, False sinon.
    """
    print(f"üîç [SERVICE] V√©rification des doublons pour email: {email}, programme: {programme_id}")
    print(f"üîå [SERVICE] Session DB active: {db.is_active}")
    
    try:
        # Normalisation de l'email
        normalized_email = email.lower().strip()
        print(f"üìß [SERVICE] Email normalis√©: {normalized_email}")
        
        async with transaction_manager(db) as session:
            # Recherche d'une pr√©inscription existante
            stmt = select(Preinscription).where(
                and_(
                    Preinscription.email == email.lower().strip(),  # Normalisation de l'email
                    Preinscription.programme_id == programme_id
                )
            )
            print(f"üîé [SERVICE] Requ√™te SQL: {stmt}")
            
            # Ex√©cuter la requ√™te
            print("‚ö° [SERVICE] Ex√©cution de la requ√™te de v√©rification des doublons...")
            result = await session.execute(stmt)
            print("‚úÖ [SERVICE] Requ√™te ex√©cut√©e avec succ√®s")
            
            # R√©cup√©rer le r√©sultat
            existing_preinscription = result.scalar_one_or_none()
            print(f"üìù [SERVICE] R√©sultat de la recherche: {existing_preinscription}")
            
            if existing_preinscription:
                print(f"‚ö†Ô∏è [SERVICE] Doublon d√©tect√© - Email: {normalized_email}, Programme: {programme_id}")
                return True
                
            print(f"‚úÖ [SERVICE] Aucun doublon trouv√© pour email: {normalized_email}, programme: {programme_id}")
            return False
            
    except Exception as e:
        print(f"üí• [SERVICE] Erreur inattendue lors de la v√©rification des doublons: {str(e)}")
        print(f"üîç [SERVICE] Type d'erreur: {type(e)}")
        print(f"üìã [SERVICE] Arguments de l'erreur: {e.args}")
        raise HTTPException(
            status_code=500,
            detail=f"Une erreur inattendue s'est produite lors de la v√©rification des doublons: {str(e)}"
        )

async def process_preinscription(
    form_data: PreinscriptionForm,
    programme_id: int,
    db: AsyncSession = None
) -> Dict[str, Any]:
    """
    Traite la pr√©inscription et stocke les donn√©es dans la base de donn√©es et un fichier JSON.
    """
    print(f"üìù [SERVICE] Traitement de la pr√©inscription pour le programme: {programme_id}")
    print(f"üìã [SERVICE] Donn√©es du formulaire: {form_data.model_dump()}")
    print(f"üîå [SERVICE] Session DB: {db}")
    
    try:
        # Convertir programme_id en entier
        try:
            programme_id_int = int(programme_id)
        except ValueError:
            print(f"üí• [SERVICE] ID de programme invalide: {programme_id}")
            raise HTTPException(
                status_code=400,
                detail="L'ID du programme doit √™tre un nombre entier"
            )

        async with transaction_manager(db) as session:
            # V√©rifier si le programme existe et a des places disponibles
            print("üîç [SERVICE] V√©rification des informations du programme...")
            stmt = select(Programme).where(Programme.id == programme_id_int)
            result = await session.execute(stmt)
            programme = result.scalar_one_or_none()
            
            if not programme:
                print(f"‚ö†Ô∏è [SERVICE] Programme non trouv√© avec l'ID: {programme_id_int}")
                raise HTTPException(status_code=404, detail="Programme non trouv√©")
                
            if programme.places_disponibles <= 0:
                print(f"‚ö†Ô∏è [SERVICE] Plus de places disponibles pour le programme: {programme_id_int}")
                raise HTTPException(
                    status_code=400,
                    detail="D√©sol√©, il n'y a plus de places disponibles pour ce programme"
                )

            # V√©rifier les doublons
            print("üîç [SERVICE] V√©rification des doublons...")
            is_duplicate = await check_duplicate_preinscription(form_data.email, programme_id_int, session)
            if is_duplicate:
                raise HTTPException(
                    status_code=400,
                    detail="Une pr√©inscription existe d√©j√† pour cet email et ce programme"
                )

            # G√©n√©rer un ID unique pour la pr√©inscription
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            preinscription_id = f"preins_{programme_id_int}_{timestamp}"
            print(f"üÜî [SERVICE] ID de pr√©inscription g√©n√©r√©: {preinscription_id}")

            # Cr√©er l'instance Preinscription pour la base de donn√©es
            preinscription_db = Preinscription(
                programme_id=programme_id_int,
                nom=form_data.nom,
                prenom=form_data.prenom,
                email=form_data.email,
                telephone=form_data.telephone,
                date_naissance=form_data.date_naissance,
                adresse=form_data.adresse,
                code_postal=form_data.code_postal,
                ville=form_data.ville,
                situation_professionnelle=SituationProfessionnelle(form_data.situation_professionnelle),
                niveau_etude=NiveauEtude(form_data.niveau_etude),
                projet_entrepreneurial=form_data.projet_entrepreneurial,
                rgpd_consent=form_data.rgpd_consent,
                rgpd_consent_date=datetime.now().date(),
                date_soumission=datetime.now().date(),
                source="formulaire_web"
            )

            # Mettre √† jour le nombre de places disponibles
            programme.places_disponibles -= 1
            print(f"‚úÖ [SERVICE] Mise √† jour des places disponibles: {programme.places_disponibles} restantes")
            
            # Sauvegarder la pr√©inscription
            session.add(preinscription_db)
            await session.flush()
            print(f"üíæ [SERVICE] Pr√©inscription sauvegard√©e dans la base de donn√©es: {preinscription_id}")

            # Pr√©parer les informations du programme pour la r√©ponse
            programme_info = {
                "id": programme.id,
                "nom": programme.nom,
                "description": programme.description,
                "date_debut": programme.date_debut.isoformat() if programme.date_debut else None,
                "date_fin": programme.date_fin.isoformat() if programme.date_fin else None,
                "lieu": programme.lieu,
                "places_disponibles": programme.places_disponibles,
                "places_totales": programme.places_totales,
                "statut": programme.statut.value if programme.statut else None,
                "prix": programme.prix
            }

            # Cr√©er un dossier pour les pr√©inscriptions si n√©cessaire
            preinscriptions_dir = os.path.join(FICHIERS_DIR, "preinscriptions")
            os.makedirs(preinscriptions_dir, exist_ok=True)
            print(f"üìÅ [SERVICE] Dossier des pr√©inscriptions: {preinscriptions_dir}")
            
            # Pr√©parer les donn√©es √† sauvegarder dans le fichier JSON
            preinscription_data = {
                "id": preinscription_id,
                "programme_id": programme_id,
                **form_data.model_dump()
            }
            print(f"üìã [SERVICE] Donn√©es de pr√©inscription √† sauvegarder: {preinscription_data}")
            
            # Sauvegarder les donn√©es dans un fichier JSON
            file_path = os.path.join(preinscriptions_dir, f"{preinscription_id}.json")
            try:
                with open(file_path, "w", encoding="utf-8") as f:
                    json.dump(preinscription_data, f, ensure_ascii=False, indent=2, default=serialize_dates)
                print(f"üíæ [SERVICE] Fichier JSON cr√©√©: {file_path}")
            except Exception as file_error:
                print(f"üí• [SERVICE] Erreur lors de la sauvegarde du fichier JSON: {str(file_error)}")
                # Ne pas lever d'exception ici car les donn√©es sont d√©j√† en base de donn√©es
            
            # Convertir les dates dans le r√©sultat √©galement
            result = {
                "id": preinscription_id,
                "status": "success",
                "message": "Pr√©inscription enregistr√©e avec succ√®s",
                "programme_info": programme_info
            }
            print(f"‚úÖ [SERVICE] Pr√©inscription trait√©e avec succ√®s: {preinscription_id}")
            print(f"üìä [SERVICE] R√©sultat final: {result}")
            return result
        
    except Exception as e:
        print(f"üí• [SERVICE] Erreur lors du traitement de la pr√©inscription: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors du traitement de la pr√©inscription: {str(e)}"
        )