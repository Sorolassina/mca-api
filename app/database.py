# app/database.py
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text
from app.config import settings
from app.models.models import Base
import os

# D√©terminer le sch√©ma √† utiliser en fonction de l'environnement
SCHEMA_NAME = "public" if settings.ENVIRONNEMENT == "development" else "mca_api"

print(f"üîÑ DATABASE_URL: {settings.DATABASE_URL}")
print(f"üìö Utilisation du sch√©ma: {SCHEMA_NAME}")

DATABASE_URL = settings.DATABASE_URL.replace('postgresql://', 'postgresql+asyncpg://')

# Cr√©er le moteur de base de donn√©es asynchrone
engine = create_async_engine(
    DATABASE_URL,
    echo=True,  # Affiche les requ√™tes SQL dans les logs
    future=True,
    connect_args={
        "server_settings": {
            "search_path": SCHEMA_NAME  # Utiliser le sch√©ma appropri√© selon l'environnement
        }
    }
)

# Cr√©er une factory de sessions asynchrones
AsyncSessionLocal = sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False,
    autocommit=False,
    autoflush=False
)

# D√©pendance FastAPI pour obtenir une session DB
async def get_db():
    """
    Fournit une session de base de donn√©es pour chaque requ√™te.
    S'assure que la session est ferm√©e apr√®s utilisation.
    """
    async with AsyncSessionLocal() as session:
        try:
            # Utilisation de text() pour la requ√™te SQL textuelle
            await session.execute(text(f"SET search_path TO {SCHEMA_NAME}"))
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()

async def init_db():
    """
    Initialise la base de donn√©es en cr√©ant toutes les tables.
    √Ä utiliser uniquement en d√©veloppement.
    """
    print(f"üîÑ Initialisation de la base de donn√©es dans le sch√©ma {SCHEMA_NAME}...")
    try:
        async with engine.begin() as conn:
            await conn.execute(text(f"CREATE SCHEMA IF NOT EXISTS {SCHEMA_NAME}"))
            await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ Base de donn√©es initialis√©e avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {str(e)}")
        raise