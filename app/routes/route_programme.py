# app/routes/route_programme.py
from fastapi import APIRouter, HTTPException, Depends, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from sqlalchemy.ext.asyncio import AsyncSession
from app.schemas.schema_programme import (
    ProgrammeCreate,
    ProgrammeUpdate,
    ProgrammeResponse,
    ProgrammeBase
)
from app.services.service_programme import ProgrammeService
from app.database import get_db
from datetime import datetime
from typing import List
from app.config import TEMPLATE_DIR, get_static_url
from app.core.logging_config import setup_logging
import traceback

# Configuration du logger
logger = setup_logging().getChild('routes.programme')

router = APIRouter()
templates = Jinja2Templates(directory=TEMPLATE_DIR)
# Ajouter la fonction get_static_url aux templates
templates.env.globals["get_static_url"] = get_static_url

# Route API pour lister tous les programmes (JSON)
@router.get("/liste", response_model=List[ProgrammeResponse])
async def list_programmes_api(db: AsyncSession = Depends(get_db)):
    """Retourne la liste de tous les programmes en JSON"""
    print("\n=== üìã D√âBUT LISTE PROGRAMMES API ===")
    try:
        print("üîç Initialisation du service...")
        service = ProgrammeService(db)
        
        print("üìä R√©cup√©ration des programmes...")
        programmes = await service.get_all_programmes()
        
        print(f"\n‚úÖ Liste des programmes r√©cup√©r√©e:")
        print(f"  - Nombre total: {len(programmes)}")
        for prog in programmes:
            print(f"  - Programme {prog.id}: {prog.nom} ({prog.statut})")
        
        print("=== FIN LISTE PROGRAMMES API ===\n")
        return programmes
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de la liste:")
        print(f"üìã Traceback:\n{traceback.format_exc()}")
        raise

# Route pour cr√©er un programme
@router.post("/create", response_model=ProgrammeResponse)
async def create_programme(
    programme: ProgrammeCreate,
    db: AsyncSession = Depends(get_db)
):
    """Cr√©e un nouveau programme"""
    print("\n=== üìù D√âBUT CR√âATION PROGRAMME API ===")
    try:
        print("üìã Donn√©es re√ßues:")
        print(f"  - Nom: {programme.nom}")
        print(f"  - Statut: {programme.statut}")
        print(f"  - Places: {programme.places_disponibles}/{programme.places_totales}")
        print(f"  - Objectifs: {len(programme.objectifs) if programme.objectifs else 0}")
        print(f"  - Pr√©requis: {len(programme.prerequis) if programme.prerequis else 0}")
        
        print("\nüîç Initialisation du service...")
        service = ProgrammeService(db)
        
        print("üìä Cr√©ation du programme...")
        nouveau_programme = await service.create_programme(programme)
        
        print(f"\n‚úÖ Programme cr√©√© avec succ√®s:")
        print(f"  - ID: {nouveau_programme.id}")
        print(f"  - Nom: {nouveau_programme.nom}")
        print(f"  - Statut: {nouveau_programme.statut}")
        print(f"  - Places: {nouveau_programme.places_disponibles}/{nouveau_programme.places_totales}")
        
        print("=== FIN CR√âATION PROGRAMME API ===\n")
        return nouveau_programme
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation:")
        print(f"üìã Traceback:\n{traceback.format_exc()}")
        raise

# Route pour obtenir un programme sp√©cifique
@router.get("/get/{programme_id}", response_model=ProgrammeResponse)
async def get_programme(
    programme_id: int,
    db: AsyncSession = Depends(get_db)
):
    """R√©cup√®re un programme par son ID"""
    print(f"\n=== üîç D√âBUT R√âCUP√âRATION PROGRAMME {programme_id} API ===")
    try:
        print("üîç Initialisation du service...")
        service = ProgrammeService(db)
        
        print(f"üìä R√©cup√©ration du programme {programme_id}...")
        programme = await service.get_programme(programme_id)
        
        print(f"\n‚úÖ Programme trouv√©:")
        print(f"  - ID: {programme.id}")
        print(f"  - Nom: {programme.nom}")
        print(f"  - Statut: {programme.statut}")
        print(f"  - Places: {programme.places_disponibles}/{programme.places_totales}")
        print(f"  - Objectifs: {len(programme.objectifs)}")
        print(f"  - Pr√©requis: {len(programme.prerequis)}")
        
        print("=== FIN R√âCUP√âRATION PROGRAMME API ===\n")
        return programme
        
    except HTTPException as he:
        print(f"‚ö†Ô∏è Programme non trouv√©: ID={programme_id}")
        raise
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration:")
        print(f"üìã Traceback:\n{traceback.format_exc()}")
        raise

# Route pour mettre √† jour un programme
@router.put("/update/{programme_id}", response_model=ProgrammeResponse)
async def update_programme(
    programme_id: int,
    programme: ProgrammeUpdate,
    db: AsyncSession = Depends(get_db)
):
    """Met √† jour un programme existant"""
    print(f"\n=== üîÑ D√âBUT MISE √Ä JOUR PROGRAMME {programme_id} API ===")
    try:
        print("üìã Donn√©es de mise √† jour re√ßues:")
        update_data = programme.model_dump(exclude_unset=True)
        print(f"  - Champs √† mettre √† jour: {list(update_data.keys())}")
        if 'objectifs' in update_data:
            print(f"  - Nombre d'objectifs: {len(update_data['objectifs'])}")
        if 'prerequis' in update_data:
            print(f"  - Nombre de pr√©requis: {len(update_data['prerequis'])}")
        
        print("\nüîç Initialisation du service...")
        service = ProgrammeService(db)
        
        print(f"üìä Mise √† jour du programme {programme_id}...")
        programme_mis_a_jour = await service.update_programme(programme_id, programme)
        
        print(f"\n‚úÖ Programme mis √† jour avec succ√®s:")
        print(f"  - ID: {programme_mis_a_jour.id}")
        print(f"  - Nom: {programme_mis_a_jour.nom}")
        print(f"  - Statut: {programme_mis_a_jour.statut}")
        print(f"  - Places: {programme_mis_a_jour.places_disponibles}/{programme_mis_a_jour.places_totales}")
        print(f"  - Objectifs: {len(programme_mis_a_jour.objectifs)}")
        print(f"  - Pr√©requis: {len(programme_mis_a_jour.prerequis)}")
        
        print("=== FIN MISE √Ä JOUR PROGRAMME API ===\n")
        return programme_mis_a_jour
        
    except HTTPException as he:
        print(f"‚ö†Ô∏è Erreur HTTP: {str(he)}")
        raise
    except Exception as e:
        print(f"‚ùå Erreur lors de la mise √† jour:")
        print(f"üìã Traceback:\n{traceback.format_exc()}")
        raise

# Route pour supprimer un programme
@router.delete("/delete/{programme_id}", response_model=dict)
async def delete_programme(programme_id: int, db: AsyncSession = Depends(get_db)):
    """Supprime un programme par son ID"""
    print(f"\n=== üóëÔ∏è D√âBUT SUPPRESSION PROGRAMME {programme_id} API ===")
    try:
        print("üîç Initialisation du service...")
        service = ProgrammeService(db)
        print(f"üìä Suppression du programme {programme_id}...")
        
        result = await service.delete_programme(programme_id)
        
        if result:
            print(f"\n‚úÖ Programme supprim√© avec succ√®s:")
            print(f"  - ID: {programme_id}")
            return {"message": f"Programme {programme_id} supprim√© avec succ√®s"}
        else:
            raise HTTPException(
                status_code=500,
                detail="La suppression a √©chou√©"
            )
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la suppression:")
        print(f"üìã Traceback:")
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=str(e)
        )

# Route pour obtenir les d√©tails d'un programme (JSON)
@router.get("/details/{programme_id}", response_model=ProgrammeResponse)
async def get_programme_details(
    programme_id: int,
    db: AsyncSession = Depends(get_db)
):
    """R√©cup√®re les d√©tails d'un programme en JSON"""
    print(f"\n=== üîç D√âBUT R√âCUP√âRATION D√âTAILS PROGRAMME {programme_id} ===")
    try:
        print("üîç Initialisation du service...")
        service = ProgrammeService(db)
        
        print(f"üìä R√©cup√©ration des d√©tails du programme {programme_id}...")
        programme = await service.get_programme(programme_id)
        
        print(f"\n‚úÖ D√©tails r√©cup√©r√©s:")
        print(f"  - ID: {programme.id}")
        print(f"  - Nom: {programme.nom}")
        print(f"  - Statut: {programme.statut}")
        print(f"  - Places: {programme.places_disponibles}/{programme.places_totales}")
        print(f"  - Objectifs: {len(programme.objectifs)}")
        print(f"  - Pr√©requis: {len(programme.prerequis)}")
        
        print("=== FIN R√âCUP√âRATION D√âTAILS PROGRAMME ===\n")
        return programme
        
    except HTTPException as he:
        print(f"‚ö†Ô∏è Programme non trouv√©: ID={programme_id}")
        raise
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des d√©tails:")
        print(f"üìã Traceback:\n{traceback.format_exc()}")
        raise